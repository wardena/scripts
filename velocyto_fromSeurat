#In your POD directory add cell ranger packages if you don't already have them 
[ download file from downloads page ]
tar -xzvf cellranger-7.0.1.tar.gz

#Download reference
[ download file from downloads page ]
tar -xzvf refdata-gex-GRCh38-2020-A.tar.gz
gunzip *.gz 

#Download or copy reference mask file stored in  POD location /path/to/file/hg38_rmsk.gtf

#Now you need to import velocyto, see https://velocyto.org/velocyto.py/install/index.html 

#Run the following command to make sure you have all the dependencies correctly installed:

conda install numpy scipy cython numba matplotlib scikit-learn h5py click

pip install velocyto

#Once everything is installed, in each of your cell ranger output folders, which contain the processed bam files and the outs folder, you will run the following code. In this case the sample being processed in Alcohol_01.
velocyto run10x -m /path/to/file/refdata-cellranger-GRCh38-1.2.0/genes/hg38_rmsk.gtf /path/to/file/Alcohol_01/ /path/to/file/cell_ranger/refdata-cellranger-GRCh38-1.2.0/genes/genes.gtf

#This will take 3-6 hours per sample. Run this code in each sample folder. At the end you will have a velocyto folder in each sample directory and contained within each velocyto folder will be a .loom file. 

#Now you need to merge all the .loom files, so install the following dependencies (random, pandas, re, numpy, scanpy.api, loompy) if they are not already there 
pip install -U loompy 
#documentation for loompy (https://linnarssonlab.org/loompy/installation/index.html)
pip install scanpy.api 
#documentation for scanpy.api (https://scanpy.readthedocs.io/en/stable/installation.html)

#in the POD open up python, you need python version 3.7 or greater for this to run:
import loompy
import scanpy.api as sc
import velocyto as vcy
import re
import numpy as np
import pandas as pd
import random

#bash
find /path/to/file/cell_ranger/-name '*loom'


#Now you need to merge them 
w1='/path/cell_ranger/loom_files/Alcohol_01.loom'
w2='/path/cell_ranger/loom_files/Alcohol_02.loom'
w3='/path/cell_ranger/loom_files/Alcohol_05.loom'
w4='/path/cell_ranger/loom_files/Alcohol_06.loom'
w5='/path/cell_ranger/loom_files/Alcohol_11.loom'
w6='/path/cell_ranger/loom_files/Alcohol_16.loom'
w7='/path/cell_ranger/loom_files/Alcohol_17.loom'
w8='/path/cell_ranger/loom_files/Alcohol_18.loom'
w9='/path/cell_ranger/loom_files/Alcohol_19.loom'
w10='/path/cell_ranger/loom_files/Alcohol_21.loom'
w11='/path/cell_ranger/loom_files/Alcohol_24.loom'
w12='/path/cell_ranger/loom_files/Control_02.loom'
w13='/path/cell_ranger/loom_files/Control_04.loom'
w14='/path/cell_ranger/loom_files/Control_05.loom'
w15='/path/cell_ranger/loom_files/Control_06.loom'
w16='/path/cell_ranger/loom_files/Control_08.loom'
w17='/path/cell_ranger/loom_files/Control_11.loom'
w18='/path/cell_ranger/loom_files/Control_13.loom'
w19='/path/cell_ranger/loom_files/Control_16.loom'
w20='/path/cell_ranger/loom_files/Control_18.loom'
w21='/path/cell_ranger/loom_files/Control_19.loom'
w22='/path/cell_ranger/loom_files/Control_20.loom'

loompy.combine([w1,w2,w3,w4,w5,w6,w7,w8,w9,w10,w11,w12,w13,w14,w15,w16,w17,w18,w19,w20,w21,w22], output_file='merge_samples.loom')

Pacakges/versions used:
numpy Version: 1.21.6
scanpy Version: 1.9.1
scipy  Version: 1.8.1
cython Version: 0.29.28
numba Version: 0.55.1
matplotlib Version: 3.5.2
scikit-learn Version: 1.0.2
h5py Version: 3.6.0
click Version: 8.0.4
velocyto Version: 0.17.17
loompy Version: 3.0.7
cellranger Version: 7.0.1
Python Version: 3.9.7

#moved this file to my GCP platform using sftp. Below is the code for once you are in Rstudio with your merge.loom file 


###################################################################################################################################################################
library(velocyto.R)
library(Seurat)
library(SeuratWrappers)
library (pagoda2)
library(sccore)

ldat <- read.loom.matrices("merge_samples.loom") 

###################################
## change names
#

cellnames<-colnames(ldat$spliced) # get cell names from loom
cell_pre <-unlist(lapply(cellnames, function(x) (unlist(strsplit(x,split=':'))[1])))
cell_pre_unique <- unique(cell_pre)
print(cell_pre_unique) #loom pre
####
#
cluster_tsne <- as.data.frame(pfc_human@reductions$tsne@cell.embeddings)
cluster_tsne$cluster <-  as.character(pfc_human@meta.data$seurat_clusters)

#con convert names from Seurat to Velocyto
con <- function(rn){
  bar<-unlist(strsplit(rn,split = "-"))[1]
  pre_sample<-unlist(strsplit(rn,split = "-"))[2]
  if (pre_sample=="1") {
    pre="Alcohol_01:"
  } else if (pre_sample=="2") {
    pre="Alcohol_02:"
  } else if (pre_sample=="3") {
    pre="Alcohol_05"
  } else if (pre_sample=="4") {
    pre="Alcohol_16:"
  } else if (pre_sample=="5") {
    pre="Alcohol_11:"
  } else if (pre_sample=="6") {
    pre="Alcohol_16:"
  } else if (pre_sample=="7") {
    pre="Alcohol_17:"
  } else if (pre_sample=="8") {
    pre="Alcohol_18:"
  } else if (pre_sample=="9") {
    pre="Alcohol_19:"
  } else if (pre_sample=="10") {
    pre="Alcohol_21:"
  } else if (pre_sample=="11") {
    pre="Alcohol_24:"
  } else if (pre_sample=="12") {
    pre="Control_02:"
  } else if (pre_sample=="13") {
    pre="Control_04:"
  } else if (pre_sample=="14") {
    pre="Control_05:"
  } else if (pre_sample=="15") {
    pre="Control_06:"
  } else if (pre_sample=="16") {
    pre="Control_08:"
  } else if (pre_sample=="17") {
    pre="Control_11:"
  } else if (pre_sample=="18") {
    pre="Control_13:"
  } else if (pre_sample=="19") {
    pre="Control_16:"
  } else if (pre_sample=="20") {
    pre="Control_18:"
  } else if (pre_sample=="21") {
    pre="Control_19:"
  } else if (pre_sample=="22") {
    pre="Control_20:"
  } 
  new <-paste(pre,bar,'x',sep="")
  return(new)
}

seurat_to_loom_cell_name <- unlist(lapply(rownames(cluster_tsne),con))
rownames(cluster_tsne)<-seurat_to_loom_cell_name
###########################################################
###########################################################

# this dataset has already been pre-filtered, but this is where one woudl do some filtering
emat <- ldat$spliced

emat <- emat[,colSums(emat)>=3e3]
celln<-dim(emat)[2]
#cellnr<-sample(1:celln,50000)
#emat <- emat[,cellnr]

rownames(emat) <- make.unique(rownames(emat))
########################################################################################
##
#reassign cluster and reassign tsne
cells <- colnames(emat)
tsne <- cluster_tsne ## reassign name to tsne
tsne_sub<-subset(tsne, rownames(tsne) %in% cells)
##
########################################################################################



##re_subset emat
emat<-emat[,rownames(tsne_sub)]


r <- Pagoda2$new(emat,modelType='plain',trim=10,log.scale=T)

r$adjustVariance(plot=T,do.par=T,gam.k=10)

r$calculatePcaReduction(nPcs=100,n.odgenes=3e3,maxit=300)

r$makeKnnGraph(k=30,type='PCA',center=T,distance='cosine')


r$getKnnClusters(method=multilevel.community,type='PCA',name='multilevel')
r$getEmbedding(type='PCA',embeddingType='tSNE',perplexity=50,verbose=T)
########################################################################################
##
test_cluster<-r$clusters$PCA[[1]]
test_cluster_x<-as.factor(tsne_sub[,3])
names(test_cluster_x)<-rownames(tsne_sub) # cluster assignment
# now test_cluster_x is the cluster annotation

test_tsne<-as.matrix(tsne_sub[,1:2])  #tsne 
# now test_tsne is the official coordinates
#r$embeddings$PCA$tSNE
#r@.xData$embeddings$PCA$tSNE
#r$embeddings$PCA$tSNE <- NULL
#r$clusters$PCA$multilevel
r$clusters$PCA$multilevel <-test_cluster_x
r$embeddings$PCA$tSNE<-test_tsne
##
########################################################################################

# back to plotting

par(mfrow=c(1,2))
r$plotEmbedding(type='PCA',embeddingType='tSNE',show.legend=F,mark.clusters=T,min.group.size=10,shuffle.colors=F,mark.cluster.cex=1,alpha=0.3,main='cell clusters')
r$plotEmbedding(type='PCA',embeddingType='tSNE',colors=r$counts[,"APOE"],main='APOE')




#####Velocity estimation
emat <- ldat$spliced; nmat <- ldat$unspliced
emat <- emat[,rownames(r$counts)]; nmat <- nmat[,rownames(r$counts)]; # restrict to cells that passed p2 filter
# take cluster labels
cluster.label <- r$clusters$PCA[[1]]
cell.colors <- sccore:::fac2col(cluster.label)
# take embedding
emb <- r$embeddings$PCA$tSNE

cell.dist <- as.dist(1-armaCor(t(r$reductions$PCA)))

emat <- filter.genes.by.cluster.expression(emat,cluster.label,min.max.cluster.average = 0.5)
nmat <- filter.genes.by.cluster.expression(nmat,cluster.label,min.max.cluster.average = 0.05)
length(intersect(rownames(emat),rownames(emat)))

fit.quantile <- 0.02
rvel.cd <- gene.relative.velocity.estimates(emat,nmat,deltaT=1,kCells=20,cell.dist=cell.dist,fit.quantile=fit.quantile)
par(mfrow=c(1,1))
pdf("velocyto_Oct20.pdf")
show.velocity.on.embedding.cor(emb,rvel.cd,n=300,scale='sqrt',cell.colors=ac(cell.colors,alpha=0.5),cex=0.8,arrow.scale=5,show.grid.flow=TRUE,min.grid.cell.mass=0.5,grid.n=40,arrow.lwd=1,do.par=F,cell.border.alpha = 0.1)
dev.off()

Packages/versions used: 
R version 4.1.2
velocyto.R v.0.6 
Seurat v4.1.1
SeuratWrappers v0.3.0
pagdoa2 v.1.0.10
sccore v1.0.2
ggplot2 v3.3.6

